name: Release UAT

on: [workflow_dispatch]

env:
  AWS_REGION: ap-south-1 
  ECR_REPOSITORY: 246214346933.dkr.ecr.ap-south-1.amazonaws.com/pms-website
  # ECS_SERVICE: MY_ECS_SERVICE # set this to your Amazon ECS service name
  # ECS_CLUSTER: MY_ECS_CLUSTER # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION:
  #   MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
  #   # file, e.g. .aws/task-definition.json
  # CONTAINER_NAME:
  #   MY_CONTAINER_NAME # set this to the name of the container in the
  #   # containerDefinitions section of your task definition

  # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCESS_KEY_ID: AKIATSU4EZC2YCCIZP7W
  AWS_SECRET_ACCESS_KEY: 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
  stack_name: bookone_webui
  service_name: pms_website
  jenkins_username: admin
  jenkins_pass: 11c81c2a3820391c65504e1fc41472616f
  jenkins_url: https://build.naymkhan.com


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: bookone-subha
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg CONFIGURATION=test -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: delete container, image, pull image and start container
        id: update-container
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/x-www-form-urlencoded" -u "$jenkins_username:$jenkins_pass" -d "service_name=$service_name&stack_name=$stack_name" "$jenkins_url/job/update-service/buildWithParameters")
      
          if [ "$response" -eq 201 ]; then
            echo "Success! The response code is $response."
            # Add additional steps for success case, if needed
          else
            echo "Failed! The response code is $response."
            exit 1  # This will mark the GitHub Actions as failed
            # You can add additional steps for failure case, if needed
          fi

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
